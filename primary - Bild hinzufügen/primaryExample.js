var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * Copyright 2015 d.velop AG
 */
/* This template shows only some primary binding mechanisms. For a basic template description take a look at the fileCoverMenuExample template */
var Template_primaryExample = (function (_super) {
    __extends(Template_primaryExample, _super);
    /* List of variables or methods you can use:
        viewModel: the view model which is bound to the html template
    */
    function Template_primaryExample(ctx, folder, options) {
        var _this = _super.call(this, ctx, folder, options) || this;

        /* Original Template
       this.html = ['<div class="primaryContainer">',
            '<span class="headline" data-bind="text: title"></span>',
            '<div class="e-table primary" data-template="primary-ItemTemplate" data-bind="source: getProperties"></div>',
            '</div>'];
        */

        /* In this example we add some new properties and the folder icon. We add the icon above the headline and some
        new properties below the "created" property. The html variable in this template is an array and contains several parts. Because
        it is an array, we can insert our new html to the correct positions without to define a complete new html template */
        /* Here we use the folderIcon property, which we will define later in the init methode, to get the icon from the folderplan.
        Please consider, that styles usually should be placed in a css file. */
        _this.html.splice(1, 0, '<img data-bind="attr: {src: folderIcon }" style="display: block; float: left; margin-top: 8px; margin-right: 10px;" />');

        /* Second Example
        The data will now be bound automatically out of the derived class. The viewModel (vm), that we used to bind the fields, exists on
        each ElementContext and contains every column of the item. The DisplayName can be accessed with vm.InternalName.title
        value with vm.InternalName.value.
        _this.html.splice(1, 0, '<img data-bind="attr: { src: vm.Image.value }" style="width: 100px; display: block; float: left; margin-top: 8px; margin-right: 10px;" />'); */

        // This block is reserverd for the autogenerated code from the center configurators
        // ---[ELEMENTS-CONFIG-START]---
        _this._extendDerivedConfig({});
        return _this;
        // ---[ELEMENTS-CONFIG-END]---
    }
    Template_primaryExample.prototype.init = function () {
        var _this = this;
        var dfd = $.Deferred();

        _super.prototype.init.call(this).done(function () {
            if (_this.folder) {
                /* Now we define a new property in the existing view model, which will be automatically bound to the previously defined html part */
                _this.viewModel.set("folderIcon", _this.folder.get_viewOptions().IconURL);
                dfd.resolve();
            }
        }).fail(dfd.reject);
        
        return dfd.promise();
    };
    return Template_primaryExample;
}(Template_primary));
// This part is usefull to identify the file in the developer tools (chrome). The unique filename will here be primaryExample.js
//# sourceURL=primaryExample.js 
